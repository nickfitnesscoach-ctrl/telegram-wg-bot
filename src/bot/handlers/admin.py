"""
Admin commands handlers for Telegram WireGuard Bot
"""
import logging
from datetime import datetime
from typing import List, Dict, Any

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F

from ...services.wg_manager import WireGuardManager
from ...services.backup_service import BackupService, BackupHelper
from ...services.health_checker import health_checker
from ...bot.utils.formatters import MessageFormatter, ProgressFormatter
from ...bot.middlewares.auth import require_admin
from ...bot.middlewares.logging import monitor_performance, LoggingHelper
from ...database.models import get_db_session, CommandLog, BackupRecord

# Create router for admin commands
router = Router(name='admin')

# Initialize services
wg_manager = WireGuardManager()
backup_service = BackupService()
# health_checker imported from module
logger = logging.getLogger(__name__)


@router.message(Command('backup'))
@require_admin
@monitor_performance('backup_command')
async def cmd_backup(message: Message, **kwargs) -> None:
    """
    Create backup command
    Implements TZ section 3.4: backup functionality
    """
    try:
        user = kwargs.get('user')
        if not user:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # Show progress
        progress_msg = await message.answer(
            ProgressFormatter.format_loading_message("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"),
            parse_mode="HTML"
        )
        
        # Create backup
        success, result_msg, backup_id = await backup_service.create_backup('manual', user.telegram_id)
        
        if success:
            await progress_msg.edit_text(
                MessageFormatter.format_success_message(
                    'backup_created',
                    f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: <code>{backup_id}</code>\n\n"
                    f"üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restore –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                ),
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='create_backup',
                success=True,
                backup_id=backup_id
            )
        else:
            await progress_msg.edit_text(
                MessageFormatter.format_error_message('system_error', result_msg),
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='create_backup',
                success=False,
                error=result_msg
            )
        
    except Exception as e:
        logger.error(f"Error in backup command: {e}")
        await message.answer(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )


@router.message(Command('restore'))
@require_admin
@monitor_performance('restore_command')
async def cmd_restore(message: Message, **kwargs) -> None:
    """
    Restore from backup command
    Implements TZ section 3.4: restore with backup list
    """
    try:
        user = kwargs.get('user')
        if not user:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # Get available backups
        backups = await backup_service.list_backups()
        
        if not backups:
            await message.answer(
                "üìã <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /backup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                parse_mode="HTML"
            )
            return
        
        # Create keyboard with backup options
        keyboard_buttons = []
        
        for i, backup in enumerate(backups[:10]):  # Show max 10 backups
            backup_age = BackupHelper.get_backup_age_string(backup['created_at'])
            backup_size = BackupHelper.format_file_size(backup['size_bytes'])
            
            button_text = f"{backup['type']} ({backup_age}, {backup_size})"
            callback_data = f"restore:{backup['id']}"
            
            keyboard_buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=callback_data)
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="restore_cancel")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        backup_list_text = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        )
        
        await message.answer(
            backup_list_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in restore command: {e}")
        await message.answer(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith('restore:'))
async def callback_restore_confirm(callback: CallbackQuery, user) -> None:
    """Handle backup restore confirmation"""
    try:
        backup_id = callback.data.split(':', 1)[1]
        
        # Get backup info
        backup_info = await backup_service.get_backup_info(backup_id)
        
        if not backup_info:
            await callback.message.edit_text(
                "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # Show final confirmation
        confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"restore_execute:{backup_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="restore_cancel")
            ]
        ])
        
        backup_age = BackupHelper.get_backup_age_string(backup_info['created_at'])
        backup_size = BackupHelper.format_file_size(backup_info['size_bytes'])
        
        confirmation_text = (
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"<b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:</b> {backup_info['id']}\n"
            f"<b>–¢–∏–ø:</b> {backup_info['type']}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {backup_age}\n"
            f"<b>–†–∞–∑–º–µ—Ä:</b> {backup_size}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            f"–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        await callback.message.edit_text(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=confirmation_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in restore confirmation: {e}")
        await callback.message.edit_text(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith('restore_execute:'))
async def callback_restore_execute(callback: CallbackQuery, user) -> None:
    """Execute backup restore"""
    try:
        backup_id = callback.data.split(':', 1)[1]
        
        # Show progress
        await callback.message.edit_text(
            ProgressFormatter.format_loading_message("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"),
            parse_mode="HTML"
        )
        
        # Execute restore
        success, result_msg = await backup_service.restore_backup(backup_id, user.telegram_id)
        
        if success:
            await callback.message.edit_text(
                MessageFormatter.format_success_message(
                    'backup_restored',
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.\n\n"
                    f"üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
                ),
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='restore_backup',
                success=True,
                backup_id=backup_id
            )
        else:
            await callback.message.edit_text(
                MessageFormatter.format_error_message('system_error', result_msg),
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='restore_backup',
                success=False,
                error=result_msg,
                backup_id=backup_id
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error executing restore: {e}")
        await callback.message.edit_text(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data == 'restore_cancel')
async def callback_restore_cancel(callback: CallbackQuery) -> None:
    """Handle restore cancellation"""
    await callback.message.edit_text(
        "‚ùå <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /backup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
        parse_mode="HTML"
    )
    await callback.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(Command('restart'))
@require_admin
@monitor_performance('restart_command')
async def cmd_restart(message: Message, **kwargs) -> None:
    """
    Restart WireGuard service
    Admin-only command for service management
    """
    try:
        user = kwargs.get('user')
        if not user:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # Show confirmation
        confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="restart_cancel")
            ]
        ])
        
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞</b>\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å WireGuard —Å–µ—Ä–≤–∏—Å?\n"
            "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤–µ—Ç –≤—Å–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=confirmation_keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in restart command: {e}")
        await message.answer(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )


@router.callback_query(F.data == 'restart_confirm')
async def callback_restart_confirm(callback: CallbackQuery, user) -> None:
    """Execute WireGuard restart"""
    try:
        # Show progress
        await callback.message.edit_text(
            ProgressFormatter.format_loading_message("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard"),
            parse_mode="HTML"
        )
        
        # Execute restart
        success, result_msg = await wg_manager.restart_wireguard()
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>WireGuard –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>\n\n"
                "üîÑ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='restart_wireguard',
                success=True
            )
        else:
            await callback.message.edit_text(
                MessageFormatter.format_error_message('system_error', result_msg),
                parse_mode="HTML"
            )
            
            LoggingHelper.log_system_operation(
                operation='restart_wireguard',
                success=False,
                error=result_msg
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error restarting WireGuard: {e}")
        await callback.message.edit_text(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data == 'restart_cancel')
async def callback_restart_cancel(callback: CallbackQuery) -> None:
    """Handle restart cancellation"""
    await callback.message.edit_text(
        "‚ùå <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        parse_mode="HTML"
    )
    await callback.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")


@router.message(Command('health'))
@require_admin
@monitor_performance('health_command')
async def cmd_health(message: Message, **kwargs) -> None:
    """
    Detailed health check command
    Admin-only command for system diagnostics
    """
    try:
        user = kwargs.get('user')
        if not user:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # Show progress
        health_msg = await message.answer(
            ProgressFormatter.format_loading_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"),
            parse_mode="HTML"
        )
        
        # Perform detailed health check
        health_data = await health_checker.perform_health_check()
        
        # Format detailed health report
        health_report = format_detailed_health_report(health_data)
        
        await health_msg.edit_text(health_report, parse_mode="HTML")
        
        LoggingHelper.log_system_operation(
            operation='health_check',
            success=True
        )
        
    except Exception as e:
        logger.error(f"Error in health command: {e}")
        await message.answer(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )


@router.message(Command('cleanup'))
@require_admin
@monitor_performance('cleanup_command')
async def cmd_cleanup(message: Message, **kwargs) -> None:
    """
    Cleanup old logs and backups
    Admin-only maintenance command
    """
    try:
        user = kwargs.get('user')
        if not user:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
            
        # Show progress
        cleanup_msg = await message.answer(
            ProgressFormatter.format_loading_message("–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"),
            parse_mode="HTML"
        )
        
        # Cleanup old backups
        deleted_backups, freed_space = await backup_service.cleanup_old_backups()
        freed_space_str = BackupHelper.format_file_size(freed_space)
        
        cleanup_report = (
            "üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üì¶ <b>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:</b> —É–¥–∞–ª–µ–Ω–æ {deleted_backups} —Ñ–∞–π–ª–æ–≤\n"
            f"üíæ <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞:</b> {freed_space_str}\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
        
        await cleanup_msg.edit_text(cleanup_report, parse_mode="HTML")
        
        LoggingHelper.log_system_operation(
            operation='cleanup',
            success=True,
            deleted_backups=deleted_backups,
            freed_space_bytes=freed_space
        )
        
    except Exception as e:
        logger.error(f"Error in cleanup command: {e}")
        await message.answer(
            MessageFormatter.format_error_message('system_error', str(e)),
            parse_mode="HTML"
        )


# Helper functions

def format_detailed_health_report(health_data: Dict[str, Any]) -> str:
    """Format detailed health report for admin"""
    if 'error' in health_data:
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n{health_data['error']}"
    
    # WireGuard status
    wg_data = health_data.get('wireguard', {})
    wg_status = wg_data.get('status', 'unknown')
    wg_emoji = "üü¢" if wg_status == 'healthy' else "üî¥"
    
    # Disk status
    disk_data = health_data.get('disk_space', {})
    disk_status = disk_data.get('status', 'unknown')
    disk_emoji = "üü¢" if disk_status == 'healthy' else "üî¥"
    
    # Memory status
    memory_data = health_data.get('memory', {})
    memory_status = memory_data.get('status', 'unknown')
    memory_emoji = "üü¢" if memory_status == 'healthy' else "üî¥"
    
    # CPU status
    cpu_data = health_data.get('cpu', {})
    cpu_status = cpu_data.get('status', 'unknown')
    cpu_emoji = "üü¢" if cpu_status == 'healthy' else "üî¥"
    
    timestamp = health_data.get('timestamp', datetime.now()).strftime("%H:%M:%S")
    
    return (
        f"üè• <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"{wg_emoji} <b>WireGuard:</b> {wg_status}\n"
        f"   –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω: {wg_data.get('service_active', 'unknown')}\n\n"
        f"{disk_emoji} <b>–î–∏—Å–∫:</b> {disk_status}\n"
        f"   –°–≤–æ–±–æ–¥–Ω–æ: {disk_data.get('free_gb', 0):.1f}GB\n"
        f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk_data.get('usage_percent', 0):.1f}%\n\n"
        f"{memory_emoji} <b>–ü–∞–º—è—Ç—å:</b> {memory_status}\n"
        f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {memory_data.get('usage_percent', 0):.1f}%\n\n"
        f"{cpu_emoji} <b>CPU:</b> {cpu_status}\n"
        f"   –ó–∞–≥—Ä—É–∑–∫–∞: {cpu_data.get('usage_percent', 0):.1f}%\n\n"
        f"‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {timestamp}"
    )
