"""
Output formatting utilities for Telegram WireGuard Bot
"""
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
# import humanize  # Commented out - not critical

from ...config.settings import settings


class MessageFormatter:
    """Formatter for Telegram messages"""
    
    @staticmethod
    def format_client_list(clients: List[Dict[str, Any]], current_count: int) -> str:
        """
        Format client list for /list command
        Implements TZ format from section 3.2
        """
        if not clients:
            return (
                "üìã <b>–°–ø–∏—Å–æ–∫ VPN-–∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newconfig &lt;–∏–º—è&gt; –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        header = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ VPN-–∫–ª–∏–µ–Ω—Ç—ã ({current_count}/{settings.MAX_CLIENTS})</b>\n\n"
        
        client_lines = []
        for i, client in enumerate(clients, 1):
            created_date = MessageFormatter._format_date(client.get('created_at'))
            status_emoji = "üü¢" if client.get('is_active') else "üî¥"
            
            client_lines.append(
                f"{MessageFormatter._number_emoji(i)} {status_emoji} <b>{client['name']}</b> "
                f"(—Å–æ–∑–¥–∞–Ω: {created_date})"
            )
        
        footer = (
            "\n\nüíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/getconfig &lt;–Ω–æ–º–µ—Ä&gt;</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞\n"
            "üóë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/delete &lt;–Ω–æ–º–µ—Ä&gt;</code> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        )
        
        return header + "\n".join(client_lines) + footer
    
    @staticmethod
    def format_system_status(status_data: Dict[str, Any]) -> str:
        """
        Format system status for /status command
        Implements TZ format from section 3.3
        """
        wg_status = status_data.get('wireguard_status', 'unknown')
        status_emoji = "üü¢" if wg_status == 'active' else "üî¥"
        
        # Format uptime
        uptime_seconds = status_data.get('uptime_seconds', 0)
        uptime_str = MessageFormatter._format_uptime(uptime_seconds)
        
        # Format traffic
        traffic_today = status_data.get('traffic_today_gb', 0)
        
        # Format disk usage
        disk_used = status_data.get('disk_used_gb', 0)
        disk_total = status_data.get('disk_total_gb', 50)
        
        # Last check time
        last_check = datetime.now().strftime("%H:%M:%S")
        
        return (
            f"{status_emoji} <b>WireGuard VPN Status</b>\n\n"
            f"üìä <b>–°–µ—Ä–≤–µ—Ä:</b> {settings.SERVER_IP}:{settings.VPN_PORT}\n"
            f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã:</b> {status_data.get('active_clients', 0)}/{settings.MAX_CLIENTS}\n"
            f"üíæ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:</b> {disk_used:.1f}GB/{disk_total}GB\n"
            f"üîÑ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}\n"
            f"üìà <b>–¢—Ä–∞—Ñ–∏–∫ —Å–µ–≥–æ–¥–Ω—è:</b> {traffic_today:.1f}GB\n\n"
            f"‚öôÔ∏è <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_check}"
        )
    
    @staticmethod
    def format_client_info(client_data: Dict[str, Any]) -> str:
        """Format detailed client information"""
        created_date = MessageFormatter._format_date(client_data.get('created_at'))
        last_connected = client_data.get('last_connected')
        last_connected_str = (
            MessageFormatter._format_date(last_connected) 
            if last_connected else "–ù–∏–∫–æ–≥–¥–∞"
        )
        
        # Format traffic
        bytes_sent = client_data.get('bytes_sent', 0)
        bytes_received = client_data.get('bytes_received', 0)
        
        return (
            f"üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</b>\n\n"
            f"üè∑ <b>–ò–º—è:</b> {client_data['name']}\n"
            f"üåê <b>IP –∞–¥—Ä–µ—Å:</b> <code>{client_data.get('ip_address')}</code>\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created_date}\n"
            f"üîå <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {last_connected_str}\n"
            f"üìä <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {MessageFormatter._format_bytes(bytes_sent)}\n"
            f"üìä <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {MessageFormatter._format_bytes(bytes_received)}\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if client_data.get('is_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
    
    @staticmethod
    def format_logs(logs: List[Dict[str, Any]], count: int) -> str:
        """Format command logs for /logs command"""
        if not logs:
            return "üìú <b>–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        
        header = f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
        
        log_lines = []
        for log in logs:
            timestamp = MessageFormatter._format_time(log.get('created_at'))
            status_emoji = "‚úÖ" if log.get('status') == 'success' else "‚ùå"
            command = log.get('command', 'unknown')
            user = log.get('username', f"user_{log.get('user_id', 'unknown')}")
            
            log_lines.append(
                f"{status_emoji} <code>{timestamp}</code> {command} - {user}"
            )
        
        return header + "\n".join(log_lines)
    
    @staticmethod
    def format_help_message() -> str:
        """Format help message with all available commands"""
        return (
            "ü§ñ <b>Telegram WireGuard Bot</b>\n\n"
            "<b>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:</b>\n"
            "‚Ä¢ <code>/newconfig &lt;–∏–º—è&gt;</code> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ <code>/list</code> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ <code>/getconfig &lt;–Ω–æ–º–µ—Ä&gt;</code> - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ <code>/delete &lt;–Ω–æ–º–µ—Ä&gt;</code> - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            "<b>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "‚Ä¢ <code>/status</code> - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ <code>/logs [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code> - –õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "<b>üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <code>/backup</code> - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
            "‚Ä¢ <code>/restore</code> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏\n\n"
            "<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ <code>/help</code> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ <code>/about</code> - –û –±–æ—Ç–µ\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/newconfig iPhone-John</code>"
        )
    
    @staticmethod
    def format_about_message() -> str:
        """Format about message with bot information"""
        return (
            "ü§ñ <b>Telegram WireGuard Bot</b>\n\n"
            "üîß <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0\n"
            f"üåê <b>–°–µ—Ä–≤–µ—Ä:</b> {settings.SERVER_IP}\n"
            f"üë• <b>–ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> {settings.MAX_CLIENTS}\n"
            f"‚è± <b>–õ–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥:</b> {settings.MAX_COMMANDS_PER_MINUTE}/–º–∏–Ω\n\n"
            "üìã <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WireGuard\n"
            "‚Ä¢ QR-–∫–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "üõ° <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ whitelist\n"
            "‚Ä¢ Rate limiting\n"
            "‚Ä¢ –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
    
    @staticmethod
    def format_error_message(error_type: str, details: str = None) -> str:
        """Format error messages consistently"""
        error_messages = {
            'unauthorized': (
                "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
            ),
            'rate_limit': (
                f"‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_COMMANDS_PER_MINUTE} –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É."
            ),
            'invalid_command': (
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            ),
            'system_error': (
                "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."
            ),
            'wg_error': (
                "üîß <b>–û—à–∏–±–∫–∞ WireGuard</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å VPN —Å–µ—Ä–≤–µ—Ä–æ–º."
            )
        }
        
        base_message = error_messages.get(error_type, error_messages['system_error'])
        
        if details:
            return f"{base_message}\n\n<b>–î–µ—Ç–∞–ª–∏:</b> {details}"
        
        return base_message
    
    @staticmethod
    def format_success_message(operation: str, details: str = None) -> str:
        """Format success messages consistently"""
        success_messages = {
            'config_created': "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞</b>",
            'config_deleted': "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b>",
            'backup_created': "‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞</b>",
            'backup_restored': "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
            'operation_completed': "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>"
        }
        
        base_message = success_messages.get(operation, success_messages['operation_completed'])
        
        if details:
            return f"{base_message}\n\n{details}"
        
        return base_message
    
    # Helper methods
    
    @staticmethod
    def _format_date(date_obj) -> str:
        """Format date for display"""
        if not date_obj:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if isinstance(date_obj, str):
            try:
                date_obj = datetime.fromisoformat(date_obj.replace('Z', '+00:00'))
            except:
                return date_obj
        
        return date_obj.strftime("%d.%m.%Y")
    
    @staticmethod
    def _format_time(datetime_obj) -> str:
        """Format datetime for display"""
        if not datetime_obj:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if isinstance(datetime_obj, str):
            try:
                datetime_obj = datetime.fromisoformat(datetime_obj.replace('Z', '+00:00'))
            except:
                return datetime_obj
        
        return datetime_obj.strftime("%H:%M")
    
    @staticmethod
    def _format_uptime(seconds: int) -> str:
        """Format uptime in human-readable format"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            return f"{seconds // 60} –º–∏–Ω"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours} —á {minutes} –º–∏–Ω"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            return f"{days} –¥–Ω {hours} —á"
    
    @staticmethod
    def _format_bytes(bytes_count: int) -> str:
        """Format bytes in human-readable format"""
        if bytes_count == 0:
            return "0 B"
        
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if bytes_count < 1024.0:
                return f"{bytes_count:.1f} {unit}"
            bytes_count /= 1024.0
        
        return f"{bytes_count:.1f} PB"
    
    @staticmethod
    def _number_emoji(number: int) -> str:
        """Convert number to emoji"""
        emoji_map = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"
        }
        
        return emoji_map.get(number, f"{number}Ô∏è‚É£")


class ProgressFormatter:
    """Formatter for progress indicators"""
    
    @staticmethod
    def format_progress_bar(current: int, total: int, width: int = 10) -> str:
        """Create progress bar"""
        if total == 0:
            return "‚ñà" * width
        
        filled = int((current / total) * width)
        bar = "‚ñà" * filled + "‚ñë" * (width - filled)
        percentage = (current / total) * 100
        
        return f"{bar} {percentage:.1f}%"
    
    @staticmethod
    def format_loading_message(operation: str) -> str:
        """Format loading message"""
        return f"‚è≥ <b>{operation}...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."


class ConfigFileFormatter:
    """Formatter for WireGuard configuration files"""
    
    @staticmethod
    def format_instructions(client_name: str) -> str:
        """Format setup instructions for client"""
        return (
            f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {client_name}</b>\n\n"
            "<b>üîß –°–ø–æ—Å–æ–± 1 - QR-–∫–æ–¥:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
            "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ\n"
            "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            "<b>üìÅ –°–ø–æ—Å–æ–± 2 - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª .conf\n"
            "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
            "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
            "<b>üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è WireGuard:</b>\n"
            "‚Ä¢ Android: Google Play Store\n"
            "‚Ä¢ iOS: App Store\n"
            "‚Ä¢ Windows: wireguard.com\n"
            "‚Ä¢ macOS: App Store\n\n"
            "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )